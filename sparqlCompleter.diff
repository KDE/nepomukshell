Index: queryeditor.h
===================================================================
--- queryeditor.h	(revision 1178697)
+++ queryeditor.h	(working copy)
@@ -25,6 +25,7 @@
 
 namespace Nepomuk {
     class SparqlSyntaxHighlighter;
+    class SparqlCompleter;
 }
 
 class QueryEditor : public QTextEdit
@@ -35,14 +36,10 @@ public:
 
     virtual void keyPressEvent(QKeyEvent* e);
 
-private slots:
-    void insertCompletion( const QString & text );
-    
 private:
-    QCompleter * m_completer;
+    Nepomuk::SparqlCompleter * m_completer;
     Nepomuk::SparqlSyntaxHighlighter* m_highlighter;
 
-    QString wordUnderCursor();
 };
 
 #endif // QUERYEDITOR_H
Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt	(revision 1178697)
+++ CMakeLists.txt	(working copy)
@@ -25,6 +25,7 @@ set( nepomukshell_BIN_SRCS
   querymodel.cpp
   infosplash.cpp
   sparqlsyntaxhighlighter.cpp
+  sparqlcompleter.cpp
   queryeditor.cpp
 )
 
Index: queryeditor.cpp
===================================================================
--- queryeditor.cpp	(revision 1178699)
+++ queryeditor.cpp	(working copy)
@@ -19,6 +19,7 @@
 
 #include "queryeditor.h"
 #include "sparqlsyntaxhighlighter.h"
+#include "sparqlcompleter.h"
 
 #include <QtGui/QStringListModel>
 #include <QtGui/QCursor>
@@ -40,91 +41,14 @@ QueryEditor::QueryEditor(QWidget* parent
     setFocus();
 
     m_highlighter = new Nepomuk::SparqlSyntaxHighlighter( document() );
-    
-    //
-    // Completion
-    //
-    QString query = QString::fromLatin1("select ?pre ?r where { graph ?g {?r a ?t.} ?g nao:hasDefaultNamespaceAbbreviation ?pre. }");
-    
-    Soprano::Model * model = Nepomuk::ResourceManager::instance()->mainModel();
-    Soprano::QueryResultIterator it = model->executeQuery( query, Soprano::Query::QueryLanguageSparql );
-    
-    QStringList candidates;
-    while( it.next() ) {
-        QString prefix = it["pre"].toString();
-        QString res = it["r"].uri().toString();
-        res = res.mid( res.lastIndexOf('#') + 1 );
-        
-        candidates << QString( prefix + ':' + res );
-    }
-    
-    m_completer = new QCompleter( this );
-    m_completer->setModel( new QStringListModel( candidates, m_completer ) );
-    m_completer->setModelSorting( QCompleter::CaseSensitivelySortedModel );
-    m_completer->setCaseSensitivity( Qt::CaseInsensitive );
-    
-    m_completer->setWidget( this );
-    m_completer->setCompletionMode( QCompleter::PopupCompletion );
-
-    connect( m_completer, SIGNAL(activated(QString)), this, SLOT(insertCompletion(QString)) );
+    m_completer = new Nepomuk::SparqlCompleter( this );
+    installEventFilter( m_completer );
 }
 
 void QueryEditor::keyPressEvent(QKeyEvent* e)
 {
-    if( m_completer->popup()->isVisible() ) {
-        switch (e->key()) {
-            case Qt::Key_Enter:
-            case Qt::Key_Return:
-            case Qt::Key_Escape:
-            case Qt::Key_Tab:
-            case Qt::Key_Backtab:
-                e->ignore();
-                return; // let the completer do default behavior
-            default:
-                break;
-        }
-    }
-    QTextEdit::keyPressEvent(e);
-
-    QString text = wordUnderCursor();
-    if( text.length() < 2 ) // min 2 char for completion
-        return;
-    
-    m_completer->setCompletionPrefix( text );
-
-    QRect cr = cursorRect();
-    cr.setWidth( m_completer->popup()->sizeHintForColumn(0)
-                 + m_completer->popup()->verticalScrollBar()->sizeHint().width() );
-    m_completer->complete( cr );
-}
-
-
-QString QueryEditor::wordUnderCursor()
-{
-    static QString eow("~!@#$%^&*()+{}|\"<>,./;'[]\\-= "); // everything without ':', '?' and '_'
-    QTextCursor tc = textCursor();
-
-    tc.anchor();
-    while( 1 ) {
-        // vHanda: I don't understand why the cursor seems to give a pos 1 past the last char instead
-        // of just the last char.
-        int pos = tc.position() - 1; 
-        if( pos < 0 || eow.contains( document()->characterAt(pos) ) )
-            break;
-        tc.movePosition( QTextCursor::Left, QTextCursor::KeepAnchor );
-    }
-    return tc.selectedText();
-}
+    m_completer->complete();
+    kDebug() <<"Tata";
 
-void QueryEditor::insertCompletion(const QString& completion)
-{
-    QTextCursor tc = textCursor();
-    int extra = completion.length() - m_completer->completionPrefix().length();
-    tc.movePosition(QTextCursor::Left);
-    tc.movePosition(QTextCursor::EndOfWord);
-    tc.insertText(completion.right(extra));
-    setTextCursor(tc);
+    QTextEdit::keyPressEvent(e);
 }
-
-
-
